"Hello World"
5 + 5
"Hello World"
5+5
"Hello WOrld"
5+5
2+2
3^2
+2
3^2
# R Commands
variable <- 4
num2 <- 2
num2 <- 2
# R Commands
num2 <- 2
num1 + num2
num1 + num2
num2 <- 2
num2 = 2
num1 + num2
num2 = 2
num2 = 2
num2 <- 2
num2 <- 2
num2 <- 2
num2 <- 2
num2 <- 2
num2 <- 2
source("~/R/RCommands.R")
source("~/R/RCommands.R")
# Em seguida, usamos a função boxplot(variável, main="título do grafico", col="cor do gráfico") para construir o gráfico.
> boxplot(Idade, main="Boxplot: Idade", col="blue")
# Em seguida, usamos a função boxplot(variável, main="título do grafico", col="cor do gráfico") para construir o gráfico.
boxplot(Idade, main="Boxplot: Idade", col="blue")
source("~/R/boxplot_example.R")
source("~/R/boxplot_example.R")
source("~/R/boxplot_example.R")
source("~/R/boxplot_example.R")
# Em seguida, usamos a função boxplot(variável, main="título do grafico", col="cor do gráfico") para construir o gráfico.
boxplot(Idade, main="Boxplot: Idade", col="green")
source("~/R/boxplot_example.R")
#Carregando pacotes exigidos: MASS
data(cats)
boxplot(cats$Bwt~cats$Sex, main="Boxplot Comparativo: Peso x Sexo", col=c("red", "green"))
source("~/R/boxplot_example.R")
# Em seguida, usamos a função boxplot(variável, main="título do grafico", col="cor do gráfico") para construir o gráfico.
boxplot(Idade, main="Boxplot: Idade", col="green")
source("~/R/boxplot_example.R")
boxplot(cats$Bwt~cats$Sex, main="Boxplot Comparativo: Peso x Sexo", col=c("red", "green"))
boxplot(cats$Bwt~cats Sex, main="Boxplot Comparativo: Peso x Sexo", col=c("red", "green"))
source("~/R/boxplot_example.R")
'Hello World'
2+2
boxplot(cats$Bwt~cats$ Sex, main="Boxplot Comparativo: Peso x Sexo", col=c("red", "green"))
factorial(rep(2, 20))
factorial(rep(3, 20))
source("~/R/Lab/ficha1.R")
source("~/R/Lab/ficha1.R")
source("~/R/Lab/ficha1.R")
source("~/R/Lab/ficha1.R")
source("~/R/Lab/ficha1.R")
source("~/R/Lab/ficha1.R")
source("~/R/Lab/ficha1.R")
source("~/R/Lab/ficha1.R")
source("~/R/Lab/ficha1.R")
source("~/R/Lab/ficha1.R")
##### FICHA 1 #####
# Exerc 1
x1 <- c(23,18,19,19,21,23)
ls() #verificar itens no workspace
mean(x)
# Exerc 1
x1 <- c(23,18,19,19,21,23)
ls() #verificar itens no workspace
mean(x)
??permutation
permutations(2)
# Exerc 2
?getwd
?setwd
getwd() #obter a atual diretoria de trabalho
dir() #ficheiros presentes no diretório
list.files() #ficheiros presentes no diretório
# Exerc 3
save.image()
dir()
# Exerc 5
c(1,2,3,6,9,8) #concatena valores
?rep
rep(6, 4) #faz a replicação de valores
?seq
seq(1, 9, by=1) #cria sequências
# Exerc 6
x <- c(23,18,19,19,21,23)
y <- c(1.75,1.84,1.65,1.78,1.64,1.79)
u <- 3
z <- 2
w <- 1:6
x + y
x * y
x * z
y ^ z
u < z #u menor que z
y < w # booleano
sqrt(x)
sum(x)
prod(x)
?cumsum
cumsum(x) #faz soma comultativa
?cumprod
cumprod(x)
?factorial
factorial(w)
?choose
choose(3,2)
choose(w,2)
x[x>18 & x<22]
x[w!=2]
w!=2
## Exerc 7
a7 <- rep(2, 20)^seq(1:20)
b7 <- ((rep(2, 21)^seq(0, 20)))*((rep(0.8, 21)^seq(20, 0)))
c7 <- ((rep(exp(1), 21)^rep((-2),21)))*
((
(rep(2, 21)^seq(0, 20))/
(factorial(seq(0,20)))
))
rep(3:36, 3)
seq(3, 36, by=3)
seq(1, 34, by=4)
seq(1, 34, by=3)
((rep(0.4, 12))^(seq(1, 34, by=3)))
((rep(exp(1), 12))^(seq(3, 36, by=3)))
((rep(0.4, 12))^(seq(1, 34, by=3)))
((rep(exp(1), 12))^(seq(3, 36, by=3)))*((rep(0.4, 12))^(seq(1, 34, by=3)))
d7 <- (((rep(exp(1), 12))^(seq(3, 36, by=3)))*((rep(0.4, 12))^(seq(1, 34, by=3))))
d7
(((rep(2, 10))^(seq(1,10)))*(seq(1,10)))
(((rep(2, 10))^(seq(1,10)))/(seq(1,10)))
##Exerc 8
w * 3
(((rep(exp(1), 21))^(rep((-2), 21)))*((rep(2,21))^(seq(0,20))))/(factorial(seq(0,20)))
(seq(2, 30))
(seq(2, 30))^(seq(2, 29))
(seq(2, 30))^(seq(2, 28))
(seq(2, 30))^(seq(2, 29))
length(seq(2, 30))
(seq(2, 30))^(rep(2, 29))
3*((seq(2,30))^(rep(3, 29)))
((seq(2, 30))^(rep(2, 29)))+(3*((seq(2,30))^(rep(3, 29))))
b8 <- ((seq(2, 30))^(rep(2, 29)))+(3*((seq(2,30))^(rep(3, 29))))
length(seq(1, 30))
((rep(2,30))^(seq(1,30)))
((rep(2,30))^(seq(1,30)))/(seq(1,30))
(((rep(3,30))^(seq(1,30)))/((seq(1,30))^(rep(2,30))))
(((rep(2,30))^(seq(1,30)))/(seq(1,30)))+(((rep(3,30))^(seq(1,30)))/((seq(1,30))^(rep(2,30))))
c8 <- (((rep(2,30))^(seq(1,30)))/(seq(1,30)))+(((rep(3,30))^(seq(1,30)))/((seq(1,30))^(rep(2,30))))
## Exerc 9
?cbind
A <- cbind(x,y)
A
type(A)
?type
typeof(A)
A <- cbind(x,y,x1)
typeof(A)
A <- cbind(x,y)
typeof(A)
B <- rbind(x,y)
B
B <- cbind(x, y, w)
D <- cbind(x, y, w)
D
D <- cbind(x, y, w, 1)
D
D <- cbind(x, y, w)
D
D <- cbind(x, y, w, seq(1,6))
D
D <- cbind(x, y, w, seq(1,3))
D
D <- cbind(x, y, w, seq(1,7))
D
D <- cbind(x, y, w, 1)
D
dim(A)
ncol(A)
class(x)
typeof(x)
class(x)
typeof(x)
class(x)
class(A)
typeof(A)
typeof(1)
typeof(2)
typeof('2')
class(x)
class(A)
class(´A´)
class("a")
E <- cbind(x, y, z)
E
F <- data.frame
F
F <- data.frame(x, y, z)
F
class(E)
class(F)
dim(F)
dim(E)
str(F)
?str
str(E)
mylist <- list(idade=x, altura=y, nome=z, ind=w, outro=u)
mylist
class(mylist)
class(mylist$idade)
str(mylist)
mean(mylist$idade)
summary(mylist)
mean(mylist$idade)
source("~/R/Lab/ficha1.R", echo=TRUE)
View(mylist)
View(D)
summary(F)
names(F)
## Exerc 9
?diag
diag(3)
diag(10, 3, 4)
A <- matrix(c(5,1,0,
3,−1,2,
A1 <- matrix(c(5,1,0,3,(-1),2,4,0,(-1)),
nrow=3,byrow=TRUE)
A1
B1 <- diag(c(1,2,4))
B1
?det
det(A)
det(A1)
dim(A)
?inverse
?solve
solve(A)
solve(A1)
dim(A1)
solve(A1)
A1
crossprod(solve(A1), A1)
solve(A1) %*% A1
crossprod((solve(A1)), A1)
solve(A1) %*% A1
(solve(A1)) %*% A1
crossprod((solve(A1)), A1)
(solve(A1)) %*% A1
crossprod((solve(A1)), A1)
(solve(A1)) %*% A1
# Criar duas matrizes de exemplo
matriz1 <- matrix(c(1, 2, 3, 4), nrow = 2, byrow = TRUE)
matriz2 <- matrix(c(5, 6, 7, 8), nrow = 2, byrow = TRUE)
# Multiplicar as matrizes usando o operador %*%
matriz_resultado <- matriz1 %*% matriz2
# Imprimir a matriz resultado
print(matriz_resultado)
# Multiplicar as matrizes usando o operador %*%
matriz_resultado <- matriz1 %*% matriz2
matriz_resultado2 <- crossprod(matriz1, matriz2)
# Imprimir a matriz resultado
print(matriz_resultado)
print(matriz_resultado2)
dim(A1)
y1 <- c(1,2,3)
?det
det(A1)
dim(A1)
?solve
solve(A1)
A1
(solve(A1)) %*% A1
solve(A1) * y1
solve(A1) %*% y1
A1 * x1
A1 %*% x1
dim(x1)
x1 <- solve(A1) %*% y1
dim(x1)
A1 %*% x1
y1
fim(y1)
dim(y1)
y1 <- c(1,2,3)
?det
det(A1)
dim(A1)
?solve
solve(A1)
A1
(solve(A1)) %*% A1
x1 <- solve(A1) %*% y1
dim(x1)
A1 %*% x1
y1
dim(y1)
dim(y1)
dim(x1)
x1 <- solve(A1) * y1
dim(x1)
A1 %*% x1
y1
dim(y1)
dim(x1)
A1 %*% x1
x1 <- solve(A1) %*% y1
dim(x1)
A1 %*% x1
y1
dim(y1)
dim(x1)
## Exerc 10
?airquality
airquality
air_data <- airquality
str(air_data)
View(air_data)
summary(air_data)
data_june <- subset(air_data, Month==6)
data_june
summary(data_june)
?split
dados_por_mes <- split(airquality$Temp, airquality$Month)
split(airquality$Temp, airquality$Month)
?sapply
split(airquality$Temp, airquality$Month)
mes_temp <- split(airquality$Temp, airquality$Month)
sapply(mes_temp, mean)
sapply(mes_temp, max)
summary(air_data)
aplly(is.na(air_data), 2, sum)
apply(is.na(air_data), 2, sum)
?apply
?witch
?which
which(is.na(air_data$Solar.R))
which.max(is.na(air_data$Solar.R))
which.max(air_data$Solar.R)
## Exerc 10
?airquality
subset(air_data, Temp>90)
subset(air_data, Temp>90 & Ozone>70)
subset(air_data, max(Wind))
subset(air_data, Wind == max(Wind))
table(air_data)
table(air_data$Month)
library(IRLR)
library(ILSR)
library(ISLR)
library(ISLR)
data(ISLR)
library(ISLR)
data(ISLR)
ISLR
?ISLR
??ISLR
library(cars98)
data(cars98)
library(MASS)
data(cars98)
library(MASS); data(Cars93); #attach(Cars93)
table(Cars93)
library(ISLR)
View(Cars93)
library(mlr3oml)
library(mlr3oml); library(mlr3)
install.packages('mlr3oml')
library(mlr3oml); library(mlr3)
data(mlr3)
??mlr3
library(mlr3oml)
library(mlr3oml); data(mlr3)
table(mlr3)
table(mlr3oml)
library(mlr3oml)
table(mlr3oml)
consumption_eletrics <- read_csv("Python/lab/cars/modificated-data/consumption-eletrics.csv")
library(readr)
consumption_eletrics <- read_csv("Python/lab/cars/modificated-data/consumption-eletrics.csv")
summary(consumption_eletrics)
setwd("C:/Users/kassi/Documents/Python/lab/cars")
consumption_eletrics <- read_csv("Python/lab/cars/modificated-data/consumption-eletrics.csv")
consumption_fossilfuels <- read_csv("Python/lab/cars/modificated-data/consumption-fossilfuels.csv")
consumption_eletrics <- read_csv("modificated-data/consumption-eletrics.csv")
consumption_fossilfuels <- read_csv("modificated-data/consumption-fossilfuels.csv")
library(readr)
consumption_hybrids <- read_csv("modificated-data/consumption-hybrids.csv")
View(consumption_hybrids)
library(readr)
consumption_eletrics <- read_csv("modificated-data/consumption-eletrics.csv")
consumption_fossilfuels <- read_csv("modificated-data/consumption-fossilfuels.csv")
consumption_hybrids <- read_csv("modificated-data/consumption-hybrids.csv")
PT_2018 <- read_csv("modificated-data/PT-2018.csv")
PT_2019 <- read_csv("modificated-data/PT-2019.csv")
PT_2020 <- read_csv("modificated-data/PT-2020.csv")
PT_2021 <- read_csv("modificated-data/PT-2021.csv")
PT_2022 <- read_csv("modificated-data/PT-2022.csv")
summary(PT_2018)
summary(PT_2019)
summary(PT_2018)
summary(PT_2018)
View(PT_2022)
sd(PT_2018)
sd(PT_2018$`Test weight (kg)`)
summary(PT_2018)
sd(PT_2018$`Test weight (kg)`)
summary(PT_2018)
summary(PT_2019)
sd(PT_2018$`Test weight (kg)`, narm=FALSE)
sd(PT_2018$`Test weight (kg)`, na.rm=FALSE)
sd(PT_2018$`Test weight (kg)`, na.rm=TRUE)
sd(PT_2018$`Test Emission CO2 (g/km)`, na.rm=TRUE)
sd(PT_2018$`Whell Base (mm)`, na.rm=TRUE)
round(sd(PT_2018$`Whell Base (mm)`, na.rm=TRUE),2)
round(sd(PT_2018$`Test weight (kg)`, na.rm=TRUE),2)
round(sd(PT_2018$`Test Emission CO2 (g/km)`, na.rm=TRUE),2)
round(sd(PT_2018$`Whell Base (mm)`, na.rm=TRUE),2)
round(sd(PT_2018$`Engine Capacity (cm3)`, na.rm=TRUE),2)
round(sd(PT_2018$`Engine Power (kW)`, na.rm=TRUE),2)
round(sd(PT_2018$`Test weight (kg)`, na.rm=TRUE),2)
round(sd(PT_2018$`Test Emission CO2 (g/km)`, na.rm=TRUE),2)
round(sd(PT_2018$`Whell Base (mm)`, na.rm=TRUE),2)
round(sd(PT_2018$`Engine Capacity (cm3)`, na.rm=TRUE),2)
round(sd(PT_2018$`Engine Power (kW)`, na.rm=TRUE),2)
summary(PT_2019)
round(sd(PT_2019$`Test weight (kg)`, na.rm=TRUE),2)
round(sd(PT_2019$`Test Emission CO2 (g/km)`, na.rm=TRUE),2)
round(sd(PT_2019$`Whell Base (mm)`, na.rm=TRUE),2)
round(sd(PT_2019$`Engine Capacity (cm3)`, na.rm=TRUE),2)
round(sd(PT_2019$`Engine Power (kW)`, na.rm=TRUE),2)
